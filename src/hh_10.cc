/*
 * Copyright 2014 Barry Wardell
 *
 * This file is distributed under the University of Illinois/NCSA
 * Open Source License. See LICENSE file for details.
 *
 */

#include <boost/multi_array.hpp>
#include <complex>
#include <math.h>
#include <iostream>

#include "Coupling.h"
#include "hh.h"

using namespace std;

vector<complex<double>> hh_10(const double M, const double r0,
                     const vector<double> &r, const vector<double> &f, const vector<double> &fp,
                     const field_type &h1, const field_type &h2,
                     int l3, int m3, int l1, int m1, int l2, int m2) {
  vector<complex<double>> hh(r.size());
  const complex<double> I(0.0, 1.0);

  const double c18 = Coupling(l3,m3,-2,l1,m1,0,l2,m2,-2);
  const double c19 = Coupling(l3,m3,2,l1,m1,0,l2,m2,2);
  const double c20 = Coupling(l3,m3,-2,l1,m1,-1,l2,m2,-1);
  const double c21 = Coupling(l3,m3,2,l1,m1,1,l2,m2,1);
  const double c24 = Coupling(l3,m3,-2,l1,m1,-2,l2,m2,0);
  const double c25 = Coupling(l3,m3,2,l1,m1,2,l2,m2,0);

  if(l1>=2&&l2>=2) {
     for(vector<complex<double>>::size_type j=0; j!=hh.size(); ++j) {
       hh[j] = 0.35355339059327373*c24*(-1.*I*h1[7][l1][m1][j] + h1[10][l1][m1][j])*h2[6][l2][m2][j] + 0.35355339059327373*c25*(I*h1[7][l1][m1][j] + h1[10][l1][m1][j])*h2[6][l2][m2][j] + (0.17677669529663687*c20*(-(h1[8][l1][m1][j]*h2[4][l2][m2][j]) + h1[9][l1][m1][j]*h2[5][l2][m2][j] + I*h1[4][l1][m1][j]*(h2[4][l2][m2][j] + I*h2[8][l2][m2][j]) - I*h1[8][l1][m1][j]*h2[8][l2][m2][j] + I*h1[9][l1][m1][j]*h2[9][l2][m2][j] + h1[5][l1][m1][j]*(-1.*I*h2[5][l2][m2][j] + h2[9][l2][m2][j])))/f[j] + (0.17677669529663687*c21*(-(h1[8][l1][m1][j]*h2[4][l2][m2][j]) + h1[9][l1][m1][j]*h2[5][l2][m2][j] + h1[4][l1][m1][j]*(-1.*I*h2[4][l2][m2][j] - h2[8][l2][m2][j]) + I*h1[8][l1][m1][j]*h2[8][l2][m2][j] - I*h1[9][l1][m1][j]*h2[9][l2][m2][j] + h1[5][l1][m1][j]*(I*h2[5][l2][m2][j] + h2[9][l2][m2][j])))/f[j] + 0.35355339059327373*c18*h1[6][l1][m1][j]*(-1.*I*h2[7][l2][m2][j] + h2[10][l2][m2][j]) + 0.35355339059327373*c19*h1[6][l1][m1][j]*(I*h2[7][l2][m2][j] + h2[10][l2][m2][j]);
     }
  } else if(l1==0&&l2==0) {
    fill(hh.begin(), hh.end(), 0.0);
  } else if(l1==1&&l2==0) {
    fill(hh.begin(), hh.end(), 0.0);
  } else if(l1==0&&l2==1) {
    fill(hh.begin(), hh.end(), 0.0);
  } else if(l1==1&&l2==1) {
    for(vector<complex<double>>::size_type j=0; j!=hh.size(); ++j) {
      hh[j] = c20*((-0.17677669529663687*h1[8][1][m1][j]*h2[4][1][m2][j])/f[j] + (0.17677669529663687*h1[9][1][m1][j]*h2[5][1][m2][j])/f[j] - (0.17677669529663687*I*h1[8][1][m1][j]*h2[8][1][m2][j])/f[j] + h1[4][1][m1][j]*((0.17677669529663687*I*h2[4][1][m2][j])/f[j] - (0.17677669529663687*h2[8][1][m2][j])/f[j]) + (0.17677669529663687*I*h1[9][1][m1][j]*h2[9][1][m2][j])/f[j] + h1[5][1][m1][j]*((-0.17677669529663687*I*h2[5][1][m2][j])/f[j] + (0.17677669529663687*h2[9][1][m2][j])/f[j])) + c21*((-0.17677669529663687*h1[8][1][m1][j]*h2[4][1][m2][j])/f[j] + (0.17677669529663687*h1[9][1][m1][j]*h2[5][1][m2][j])/f[j] + (0.17677669529663687*I*h1[8][1][m1][j]*h2[8][1][m2][j])/f[j] + h1[4][1][m1][j]*((-0.17677669529663687*I*h2[4][1][m2][j])/f[j] - (0.17677669529663687*h2[8][1][m2][j])/f[j]) - (0.17677669529663687*I*h1[9][1][m1][j]*h2[9][1][m2][j])/f[j] + h1[5][1][m1][j]*((0.17677669529663687*I*h2[5][1][m2][j])/f[j] + (0.17677669529663687*h2[9][1][m2][j])/f[j]));
    }
  } else if(l1==0) {
    for(vector<complex<double>>::size_type j=0; j!=hh.size(); ++j) {
      hh[j] = c18*h1[6][0][0][j]*(-0.35355339059327373*I*h2[7][l2][m2][j] + 0.35355339059327373*h2[10][l2][m2][j]) + c19*h1[6][0][0][j]*(0.35355339059327373*I*h2[7][l2][m2][j] + 0.35355339059327373*h2[10][l2][m2][j]);
    }
  } else if(l2==0) {
    for(vector<complex<double>>::size_type j=0; j!=hh.size(); ++j) {
      hh[j] = c24*(-0.35355339059327373*I*h1[7][l1][m1][j]*h2[6][0][0][j] + 0.35355339059327373*h1[10][l1][m1][j]*h2[6][0][0][j]) + c25*(0.35355339059327373*I*h1[7][l1][m1][j]*h2[6][0][0][j] + 0.35355339059327373*h1[10][l1][m1][j]*h2[6][0][0][j]);
    }
  } else if(l1==1) {
    for(vector<complex<double>>::size_type j=0; j!=hh.size(); ++j) {
      hh[j] = c20*((-0.17677669529663687*h1[8][1][m1][j]*h2[4][l2][m2][j])/f[j] + (0.17677669529663687*h1[9][1][m1][j]*h2[5][l2][m2][j])/f[j] - (0.17677669529663687*I*h1[8][1][m1][j]*h2[8][l2][m2][j])/f[j] + h1[4][1][m1][j]*((0.17677669529663687*I*h2[4][l2][m2][j])/f[j] - (0.17677669529663687*h2[8][l2][m2][j])/f[j]) + (0.17677669529663687*I*h1[9][1][m1][j]*h2[9][l2][m2][j])/f[j] + h1[5][1][m1][j]*((-0.17677669529663687*I*h2[5][l2][m2][j])/f[j] + (0.17677669529663687*h2[9][l2][m2][j])/f[j])) + c21*((-0.17677669529663687*h1[8][1][m1][j]*h2[4][l2][m2][j])/f[j] + (0.17677669529663687*h1[9][1][m1][j]*h2[5][l2][m2][j])/f[j] + (0.17677669529663687*I*h1[8][1][m1][j]*h2[8][l2][m2][j])/f[j] + h1[4][1][m1][j]*((-0.17677669529663687*I*h2[4][l2][m2][j])/f[j] - (0.17677669529663687*h2[8][l2][m2][j])/f[j]) - (0.17677669529663687*I*h1[9][1][m1][j]*h2[9][l2][m2][j])/f[j] + h1[5][1][m1][j]*((0.17677669529663687*I*h2[5][l2][m2][j])/f[j] + (0.17677669529663687*h2[9][l2][m2][j])/f[j])) + c18*h1[6][1][m1][j]*(-0.35355339059327373*I*h2[7][l2][m2][j] + 0.35355339059327373*h2[10][l2][m2][j]) + c19*h1[6][1][m1][j]*(0.35355339059327373*I*h2[7][l2][m2][j] + 0.35355339059327373*h2[10][l2][m2][j]);
    }
  } else if(l2==1) {
    for(vector<complex<double>>::size_type j=0; j!=hh.size(); ++j) {
      hh[j] = c24*(-0.35355339059327373*I*h1[7][l1][m1][j]*h2[6][1][m2][j] + 0.35355339059327373*h1[10][l1][m1][j]*h2[6][1][m2][j]) + c25*(0.35355339059327373*I*h1[7][l1][m1][j]*h2[6][1][m2][j] + 0.35355339059327373*h1[10][l1][m1][j]*h2[6][1][m2][j]) + c20*((-0.17677669529663687*h1[8][l1][m1][j]*h2[4][1][m2][j])/f[j] + (0.17677669529663687*h1[9][l1][m1][j]*h2[5][1][m2][j])/f[j] - (0.17677669529663687*I*h1[8][l1][m1][j]*h2[8][1][m2][j])/f[j] + h1[4][l1][m1][j]*((0.17677669529663687*I*h2[4][1][m2][j])/f[j] - (0.17677669529663687*h2[8][1][m2][j])/f[j]) + (0.17677669529663687*I*h1[9][l1][m1][j]*h2[9][1][m2][j])/f[j] + h1[5][l1][m1][j]*((-0.17677669529663687*I*h2[5][1][m2][j])/f[j] + (0.17677669529663687*h2[9][1][m2][j])/f[j])) + c21*((-0.17677669529663687*h1[8][l1][m1][j]*h2[4][1][m2][j])/f[j] + (0.17677669529663687*h1[9][l1][m1][j]*h2[5][1][m2][j])/f[j] + (0.17677669529663687*I*h1[8][l1][m1][j]*h2[8][1][m2][j])/f[j] + h1[4][l1][m1][j]*((-0.17677669529663687*I*h2[4][1][m2][j])/f[j] - (0.17677669529663687*h2[8][1][m2][j])/f[j]) - (0.17677669529663687*I*h1[9][l1][m1][j]*h2[9][1][m2][j])/f[j] + h1[5][l1][m1][j]*((0.17677669529663687*I*h2[5][1][m2][j])/f[j] + (0.17677669529663687*h2[9][1][m2][j])/f[j]));
    }
  } else {
    /* We should never reach here */
    cerr << "Invalid value for l1 (" << l1 << ") or l2 (" << l2 << ")." << endl;
    exit(EXIT_FAILURE);
  }

  return hh;
}
