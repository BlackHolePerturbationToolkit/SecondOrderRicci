/*
 * Copyright 2014 Barry Wardell
 *
 * This file is distributed under the University of Illinois/NCSA
 * Open Source License. See LICENSE file for details.
 *
 */

#include <boost/multi_array.hpp>
#include <complex>
#include <math.h>

#include "Coupling.h"
#include "R2.h"

using std::complex;
using std::vector;

vector<complex<double>> R2_1(const double M, const double r0,
                     const vector<double> &r, const vector<double> &f, const vector<double> &fp,
                     const field_type &h, const field_type &dh, const field_type &ddh,
                     int l3, int m3, int l1, int m1, int l2, int m2) {
  vector<complex<double>> ricci(r.size());
  const complex<double> I(0.0, 1.0);
  const double Omega = sqrt(M/(r0*r0*r0));
  const double Omega_2 = Omega*Omega;
  const double l1d = l1, m1d = m1, l2d = l2, m2d = m2;
  const double c1 = Coupling(l3,m3,0,l1,m1,0,l2,m2,0);
  const double c2 = Coupling(l3,m3,0,l1,m1,-1,l2,m2,1);
  const double c3 = Coupling(l3,m3,0,l1,m1,1,l2,m2,-1);
  const double c4 = Coupling(l3,m3,0,l1,m1,2,l2,m2,-2);
  const double c5 = Coupling(l3,m3,0,l1,m1,-2,l2,m2,2);
  const double sqrtl1 = sqrt(l1d*(1.0 + l1d));
  const double sqrtl2 = sqrt(l1d*(1.0 + l1d)*l2d*(1.0 + l2d));
  const double sqrtl3 = sqrt(l1d*(-2. - 1.*l1d + 2.*l1d*l1d + l1d*l1d*l1d));
  const double sqrtl4 = sqrt(-2. + l1d + l1d*l1d);
  const double sqrtl5 = 1.0/sqrtl1;

  for(vector<complex<double>>::size_type j=0; j!=ricci.size(); ++j) {
    double r_2 = r[j]*r[j];
    double r_3 = r_2*r[j];
    double f_2 = f[j]*f[j];
    double f_3 = f_2*f[j];
    double f_4 = f_2*f_2;

    ricci[j] = (0.35355339059327373*c1*(-(f_3*r_2*(dh[1][l2][m2][j]*dh[3][l1][m1][j] + dh[1][l1][m1][j]*dh[3][l2][m2][j])) - 2.*(I*m1d*Omega*h[1][l2][m2][j]*h[2][l1][m1][j] - I*m2d*Omega*h[1][l2][m2][j]*h[2][l1][m1][j] - I*m1d*Omega*h[1][l1][m1][j]*h[2][l2][m2][j] + I*m2d*Omega*h[1][l1][m1][j]*h[2][l2][m2][j] - m1d*m2d*r_2*Omega_2*h[2][l1][m1][j]*h[2][l2][m2][j]) + f[j]*(-2.*dh[1][l2][m2][j]*h[1][l1][m1][j] - I*m1d*r_2*Omega*dh[2][l2][m2][j]*h[1][l1][m1][j] - 2.*dh[1][l1][m1][j]*h[1][l2][m2][j] - I*m2d*r_2*Omega*dh[2][l1][m1][j]*h[1][l2][m2][j] - I*m1d*r_2*Omega*dh[1][l2][m2][j]*h[2][l1][m1][j] + 2.*dh[2][l2][m2][j]*h[2][l1][m1][j] - I*m2d*r_2*Omega*dh[1][l1][m1][j]*h[2][l2][m2][j] + 2.*dh[2][l1][m1][j]*h[2][l2][m2][j] - m1d*m2d*r_2*Omega_2*h[1][l2][m2][j]*h[3][l1][m1][j] - m1d*m2d*r_2*Omega_2*h[1][l1][m1][j]*h[3][l2][m2][j]) + f_4*r[j]*(dh[6][l2][m2][j]*(r[j]*dh[6][l1][m1][j] + 2.*h[6][l1][m1][j]) - 2.*dh[6][l1][m1][j]*h[6][l2][m2][j]) + f_2*(r_2*(-2.*dh[2][l1][m1][j]*dh[2][l2][m2][j] - I*m1d*Omega*dh[3][l2][m2][j]*h[2][l1][m1][j] - I*m2d*Omega*dh[3][l1][m1][j]*h[2][l2][m2][j] + I*m1d*Omega*dh[2][l2][m2][j]*h[3][l1][m1][j] + I*m2d*Omega*dh[2][l1][m1][j]*h[3][l2][m2][j] - m1d*m2d*Omega_2*h[6][l1][m1][j]*h[6][l2][m2][j]) + sqrtl2*h[8][l1][m1][j]*h[8][l2][m2][j] + sqrtl2*h[9][l1][m1][j]*h[9][l2][m2][j])))/(f_2*r_2) + (0.35355339059327373*c2*(r[j]*(I*m2d*sqrtl1*Omega*r[j]*h[1][l1][m1][j]*h[4][l2][m2][j] - m1d*m2d*r_2*Omega_2*h[4][l1][m1][j]*h[4][l2][m2][j] + I*m2d*Omega*h[4][l2][m2][j]*h[5][l1][m1][j] + I*m2d*sqrtl1*Omega*r[j]*h[2][l1][m1][j]*h[5][l2][m2][j] - I*m1d*m2d*r_2*Omega_2*h[4][l2][m2][j]*h[8][l1][m1][j] - h[5][l2][m2][j]*(-1.0*I*m1d*Omega*h[4][l1][m1][j] + m1d*Omega*h[8][l1][m1][j]) + m2d*sqrtl1*Omega*r[j]*h[1][l1][m1][j]*h[8][l2][m2][j] + I*m1d*m2d*r_2*Omega_2*h[4][l1][m1][j]*h[8][l2][m2][j] + m2d*Omega*h[5][l1][m1][j]*h[8][l2][m2][j] - m1d*m2d*r_2*Omega_2*h[8][l1][m1][j]*h[8][l2][m2][j] - m2d*Omega*h[4][l2][m2][j]*h[9][l1][m1][j] + I*m2d*Omega*h[8][l2][m2][j]*h[9][l1][m1][j] + m2d*sqrtl1*Omega*r[j]*h[2][l1][m1][j]*h[9][l2][m2][j] + I*(-1.0*I*m1d*Omega*h[4][l1][m1][j] + m1d*Omega*h[8][l1][m1][j])*h[9][l2][m2][j]) - f_2*r[j]*(r_2*dh[5][l1][m1][j]*dh[5][l2][m2][j] + I*r_2*dh[5][l2][m2][j]*dh[9][l1][m1][j] - I*r_2*dh[5][l1][m1][j]*dh[9][l2][m2][j] + r_2*dh[9][l1][m1][j]*dh[9][l2][m2][j] + r[j]*dh[4][l1][m1][j]*h[4][l2][m2][j] + I*r[j]*dh[8][l1][m1][j]*h[4][l2][m2][j] + r[j]*dh[5][l1][m1][j]*h[5][l2][m2][j] + I*r[j]*dh[9][l1][m1][j]*h[5][l2][m2][j] - I*r[j]*dh[4][l1][m1][j]*h[8][l2][m2][j] + r[j]*dh[8][l1][m1][j]*h[8][l2][m2][j] + I*r[j]*dh[5][l2][m2][j]*h[9][l1][m1][j] + r[j]*dh[9][l2][m2][j]*h[9][l1][m1][j] + 2.0*I*h[5][l2][m2][j]*h[9][l1][m1][j] + sqrtl1*h[3][l1][m1][j]*(r[j]*dh[5][l2][m2][j] - I*r[j]*dh[9][l2][m2][j] + 2.*h[5][l2][m2][j] - 2.0*I*h[9][l2][m2][j]) + h[5][l1][m1][j]*(r[j]*dh[5][l2][m2][j] - I*r[j]*dh[9][l2][m2][j] + 2.*h[5][l2][m2][j] - 2.0*I*h[9][l2][m2][j]) - I*r[j]*dh[5][l1][m1][j]*h[9][l2][m2][j] + r[j]*dh[9][l1][m1][j]*h[9][l2][m2][j] + 2.*h[9][l1][m1][j]*h[9][l2][m2][j]) + f[j]*(r_2*sqrtl1*dh[5][l2][m2][j]*h[1][l1][m1][j] - I*r_2*sqrtl1*dh[9][l2][m2][j]*h[1][l1][m1][j] + r_2*sqrtl1*dh[4][l2][m2][j]*h[2][l1][m1][j] - I*r_2*sqrtl1*dh[8][l2][m2][j]*h[2][l1][m1][j] + sqrtl2*r[j]*h[1][l1][m1][j]*h[3][l2][m2][j] - I*m1d*r_2*Omega*h[4][l2][m2][j]*h[5][l1][m1][j] + r[j]*dh[5][l1][m1][j]*h[5][l2][m2][j] + I*r[j]*dh[9][l1][m1][j]*h[5][l2][m2][j] + 2.*sqrtl1*r[j]*h[1][l1][m1][j]*h[5][l2][m2][j] - m1d*r_2*Omega*h[5][l1][m1][j]*h[8][l2][m2][j] + I*r[j]*dh[5][l2][m2][j]*h[9][l1][m1][j] + r[j]*dh[9][l2][m2][j]*h[9][l1][m1][j] + m1d*r_2*Omega*h[4][l2][m2][j]*h[9][l1][m1][j] + 2.0*I*h[5][l2][m2][j]*h[9][l1][m1][j] - I*m1d*r_2*Omega*h[8][l2][m2][j]*h[9][l1][m1][j] + h[5][l1][m1][j]*(r[j]*(dh[5][l2][m2][j] - I*dh[9][l2][m2][j]) + 2.*h[5][l2][m2][j] - 2.0*I*h[9][l2][m2][j]) - I*r[j]*dh[5][l1][m1][j]*h[9][l2][m2][j] + r[j]*dh[9][l1][m1][j]*h[9][l2][m2][j] - 2.0*I*sqrtl1*r[j]*h[1][l1][m1][j]*h[9][l2][m2][j] + 2.*h[9][l1][m1][j]*h[9][l2][m2][j] + h[3][l1][m1][j]*(2.*sqrtl1*h[5][l2][m2][j] + r[j]*(sqrtl2*h[1][l2][m2][j] - sqrtl1*r[j]*(-1.0*I*m2d*Omega*h[4][l2][m2][j] - m2d*Omega*h[8][l2][m2][j])) - 2.0*I*sqrtl1*h[9][l2][m2][j]))))/(r_3*f[j]) + (0.35355339059327373*c3*(r[j]*(I*m2d*sqrtl1*Omega*r[j]*h[1][l1][m1][j]*h[4][l2][m2][j] - m1d*m2d*r_2*Omega_2*h[4][l1][m1][j]*h[4][l2][m2][j] + I*m2d*Omega*h[4][l2][m2][j]*h[5][l1][m1][j] + I*m2d*sqrtl1*Omega*r[j]*h[2][l1][m1][j]*h[5][l2][m2][j] + I*m1d*m2d*r_2*Omega_2*h[4][l2][m2][j]*h[8][l1][m1][j] - h[5][l2][m2][j]*(-1.0*I*m1d*Omega*h[4][l1][m1][j] - m1d*Omega*h[8][l1][m1][j]) - m2d*sqrtl1*Omega*r[j]*h[1][l1][m1][j]*h[8][l2][m2][j] - I*m1d*m2d*r_2*Omega_2*h[4][l1][m1][j]*h[8][l2][m2][j] - m2d*Omega*h[5][l1][m1][j]*h[8][l2][m2][j] - m1d*m2d*r_2*Omega_2*h[8][l1][m1][j]*h[8][l2][m2][j] + m2d*Omega*h[4][l2][m2][j]*h[9][l1][m1][j] + I*m2d*Omega*h[8][l2][m2][j]*h[9][l1][m1][j] - m2d*sqrtl1*Omega*r[j]*h[2][l1][m1][j]*h[9][l2][m2][j] + (-(m1d*Omega*h[4][l1][m1][j]) + I*m1d*Omega*h[8][l1][m1][j])*h[9][l2][m2][j]) - f_2*r[j]*(r_2*dh[5][l1][m1][j]*dh[5][l2][m2][j] - I*r_2*dh[5][l2][m2][j]*dh[9][l1][m1][j] + I*r_2*dh[5][l1][m1][j]*dh[9][l2][m2][j] + r_2*dh[9][l1][m1][j]*dh[9][l2][m2][j] + r[j]*dh[4][l1][m1][j]*h[4][l2][m2][j] - I*r[j]*dh[8][l1][m1][j]*h[4][l2][m2][j] + r[j]*dh[5][l1][m1][j]*h[5][l2][m2][j] - I*r[j]*dh[9][l1][m1][j]*h[5][l2][m2][j] + I*r[j]*dh[4][l1][m1][j]*h[8][l2][m2][j] + r[j]*dh[8][l1][m1][j]*h[8][l2][m2][j] - I*r[j]*dh[5][l2][m2][j]*h[9][l1][m1][j] + r[j]*dh[9][l2][m2][j]*h[9][l1][m1][j] - 2.0*I*h[5][l2][m2][j]*h[9][l1][m1][j] + sqrtl1*h[3][l1][m1][j]*(r[j]*dh[5][l2][m2][j] + I*r[j]*dh[9][l2][m2][j] + 2.*h[5][l2][m2][j] + 2.0*I*h[9][l2][m2][j]) + h[5][l1][m1][j]*(r[j]*dh[5][l2][m2][j] + I*r[j]*dh[9][l2][m2][j] + 2.*h[5][l2][m2][j] + 2.0*I*h[9][l2][m2][j]) + I*r[j]*dh[5][l1][m1][j]*h[9][l2][m2][j] + r[j]*dh[9][l1][m1][j]*h[9][l2][m2][j] + 2.*h[9][l1][m1][j]*h[9][l2][m2][j]) + f[j]*(r_2*sqrtl1*dh[5][l2][m2][j]*h[1][l1][m1][j] + I*r_2*sqrtl1*dh[9][l2][m2][j]*h[1][l1][m1][j] + r_2*sqrtl1*dh[4][l2][m2][j]*h[2][l1][m1][j] + I*r_2*sqrtl1*dh[8][l2][m2][j]*h[2][l1][m1][j] + sqrtl2*r[j]*h[1][l1][m1][j]*h[3][l2][m2][j] - I*m1d*r_2*Omega*h[4][l2][m2][j]*h[5][l1][m1][j] + r[j]*dh[5][l1][m1][j]*h[5][l2][m2][j] - I*r[j]*dh[9][l1][m1][j]*h[5][l2][m2][j] + 2.*sqrtl1*r[j]*h[1][l1][m1][j]*h[5][l2][m2][j] + m1d*r_2*Omega*h[5][l1][m1][j]*h[8][l2][m2][j] - I*r[j]*dh[5][l2][m2][j]*h[9][l1][m1][j] + r[j]*dh[9][l2][m2][j]*h[9][l1][m1][j] - m1d*r_2*Omega*h[4][l2][m2][j]*h[9][l1][m1][j] - 2.0*I*h[5][l2][m2][j]*h[9][l1][m1][j] - I*m1d*r_2*Omega*h[8][l2][m2][j]*h[9][l1][m1][j] + h[5][l1][m1][j]*(r[j]*(dh[5][l2][m2][j] + I*dh[9][l2][m2][j]) + 2.*h[5][l2][m2][j] + 2.0*I*h[9][l2][m2][j]) + I*r[j]*dh[5][l1][m1][j]*h[9][l2][m2][j] + r[j]*dh[9][l1][m1][j]*h[9][l2][m2][j] + 2.0*I*sqrtl1*r[j]*h[1][l1][m1][j]*h[9][l2][m2][j] + 2.*h[9][l1][m1][j]*h[9][l2][m2][j] + h[3][l1][m1][j]*(2.*sqrtl1*h[5][l2][m2][j] + r[j]*(sqrtl2*h[1][l2][m2][j] - sqrtl1*r[j]*(-1.0*I*m2d*Omega*h[4][l2][m2][j] + m2d*Omega*h[8][l2][m2][j])) + 2.0*I*sqrtl1*h[9][l2][m2][j]))))/(r_3*f[j]) + (0.17677669529663687*c4*(r[j]*(-1.0*I*m1d*Omega*h[7][l1][m1][j] - m1d*Omega*h[10][l1][m1][j])*(-1.0*I*m2d*Omega*h[7][l2][m2][j] + m2d*Omega*h[10][l2][m2][j]) + f_2*(-2.*(dh[7][l1][m1][j] - I*dh[10][l1][m1][j])*h[7][l2][m2][j] + (dh[7][l2][m2][j] + I*dh[10][l2][m2][j])*(r[j]*dh[7][l1][m1][j] - I*r[j]*dh[10][l1][m1][j] + 2.*h[7][l1][m1][j] - 2.0*I*h[10][l1][m1][j]) + (-2.0*I*dh[7][l1][m1][j] - 2.*dh[10][l1][m1][j])*h[10][l2][m2][j])))/r[j] + (0.17677669529663687*c5*(r[j]*(-1.0*I*m1d*Omega*h[7][l1][m1][j] + m1d*Omega*h[10][l1][m1][j])*(-1.0*I*m2d*Omega*h[7][l2][m2][j] - m2d*Omega*h[10][l2][m2][j]) + f_2*(-2.*(dh[7][l1][m1][j] + I*dh[10][l1][m1][j])*h[7][l2][m2][j] + (dh[7][l2][m2][j] - I*dh[10][l2][m2][j])*(r[j]*dh[7][l1][m1][j] + I*r[j]*dh[10][l1][m1][j] + 2.*h[7][l1][m1][j] + 2.0*I*h[10][l1][m1][j]) + 2.0*I*(dh[7][l1][m1][j] + I*dh[10][l1][m1][j])*h[10][l2][m2][j])))/r[j];
    ricci[j]+= (0.7071067811865475*c1*(r[j]*h[1][l2][m2][j]*(-(m1d*m1d*r_2*Omega_2*h[1][l1][m1][j]) - 2.0*I*m1d*Omega*h[2][l1][m1][j]) - r_3*f[j]*h[1][l2][m2][j]*(-2.0*I*m1d*Omega*dh[2][l1][m1][j] - m1d*m1d*Omega_2*h[3][l1][m1][j]) + f_4*r_2*(r[j]*ddh[6][l1][m1][j] + 2.*dh[3][l1][m1][j] + 2.*dh[6][l1][m1][j])*h[6][l2][m2][j] + f_3*r[j]*(sqrtl1*h[5][l1][m1][j]*h[6][l2][m2][j] + r[j]*(r[j]*ddh[3][l1][m1][j]*h[1][l2][m2][j] + sqrtl1*dh[5][l1][m1][j]*h[6][l2][m2][j])) + f_2*(-2.*sqrtl1*h[5][l1][m1][j]*h[6][l2][m2][j] + h[1][l1][m1][j]*(4.*h[3][l2][m2][j] + (4. - l1d*(1 + l1d)*r[j])*h[6][l2][m2][j]) + r[j]*((r_2*ddh[1][l1][m1][j] + 2.*dh[3][l1][m1][j])*h[1][l2][m2][j] + r[j]*(2.0*I*m1d*Omega*h[2][l1][m1][j] - I*m1d*sqrtl1*Omega*h[4][l1][m1][j] - m1d*m1d*Omega_2*r[j]*h[6][l1][m1][j])*h[6][l2][m2][j]))))/(f_2*r_3) - (0.35355339059327373*c3*(f_2*r[j]*(-(r[j]*(r[j]*ddh[4][l1][m1][j] - I*r[j]*ddh[8][l1][m1][j] + dh[4][l1][m1][j] - I*dh[8][l1][m1][j])) + h[4][l1][m1][j] - I*h[8][l1][m1][j])*(h[4][l2][m2][j] + I*h[8][l2][m2][j]) - r[j]*(h[4][l2][m2][j] + I*h[8][l2][m2][j])*(-1.0*I*m1d*sqrtl1*Omega*r[j]*h[1][l1][m1][j] - 2.0*I*m1d*Omega*h[5][l1][m1][j] - 2.*m1d*Omega*h[9][l1][m1][j]) + f_2*sqrtl1*r[j]*(r[j]*dh[3][l1][m1][j] - h[3][l1][m1][j])*(h[5][l2][m2][j] + I*h[9][l2][m2][j]) + r_2*(I*m1d*sqrtl1*Omega*h[2][l1][m1][j] + r[j]*(-(m1d*m1d*Omega_2*h[5][l1][m1][j]) + I*m1d*m1d*Omega_2*h[9][l1][m1][j]))*(h[5][l2][m2][j] + I*h[9][l2][m2][j]) + f[j]*(r_2*sqrtl1*dh[2][l1][m1][j]*h[4][l2][m2][j] - I*m1d*r_3*Omega*dh[5][l1][m1][j]*h[4][l2][m2][j] - m1d*r_3*Omega*dh[9][l1][m1][j]*h[4][l2][m2][j] - sqrtl1*r[j]*h[2][l1][m1][j]*h[4][l2][m2][j] - I*m1d*r_2*sqrtl1*Omega*h[3][l1][m1][j]*h[4][l2][m2][j] - 2.0*I*m1d*r_2*Omega*h[4][l2][m2][j]*h[5][l1][m1][j] + 3.0*I*h[4][l2][m2][j]*h[8][l1][m1][j] - 3.*h[4][l1][m1][j]*(h[4][l2][m2][j] + I*h[8][l2][m2][j]) + I*r_2*sqrtl1*dh[2][l1][m1][j]*h[8][l2][m2][j] + m1d*r_3*Omega*dh[5][l1][m1][j]*h[8][l2][m2][j] - I*m1d*r_3*Omega*dh[9][l1][m1][j]*h[8][l2][m2][j] - I*sqrtl1*r[j]*h[2][l1][m1][j]*h[8][l2][m2][j] + m1d*r_2*sqrtl1*Omega*h[3][l1][m1][j]*h[8][l2][m2][j] + 2.*m1d*r_2*Omega*h[5][l1][m1][j]*h[8][l2][m2][j] - 3.*h[8][l1][m1][j]*h[8][l2][m2][j] - 2.*m1d*r_2*Omega*h[4][l2][m2][j]*h[9][l1][m1][j] + I*h[5][l2][m2][j]*h[9][l1][m1][j] - 2.0*I*m1d*r_2*Omega*h[8][l2][m2][j]*h[9][l1][m1][j] - h[5][l1][m1][j]*(h[5][l2][m2][j] + I*h[9][l2][m2][j]) - h[9][l1][m1][j]*h[9][l2][m2][j]) - f[j]*(-(r_2*sqrtl1*dh[1][l1][m1][j]*h[5][l2][m2][j]) - I*m1d*r_3*Omega*dh[4][l1][m1][j]*h[5][l2][m2][j] - m1d*r_3*Omega*dh[8][l1][m1][j]*h[5][l2][m2][j] + sqrtl1*r[j]*h[1][l1][m1][j]*h[5][l2][m2][j] + I*m1d*r_2*Omega*h[4][l1][m1][j]*h[5][l2][m2][j] - I*h[4][l2][m2][j]*h[8][l1][m1][j] + m1d*r_2*Omega*h[5][l2][m2][j]*h[8][l1][m1][j] + h[4][l1][m1][j]*(h[4][l2][m2][j] + I*h[8][l2][m2][j]) + h[8][l1][m1][j]*h[8][l2][m2][j] - 3.0*I*h[5][l2][m2][j]*h[9][l1][m1][j] + 3.*h[5][l1][m1][j]*(h[5][l2][m2][j] + I*h[9][l2][m2][j]) - I*r_2*sqrtl1*dh[1][l1][m1][j]*h[9][l2][m2][j] + m1d*r_3*Omega*dh[4][l1][m1][j]*h[9][l2][m2][j] - I*m1d*r_3*Omega*dh[8][l1][m1][j]*h[9][l2][m2][j] + I*sqrtl1*r[j]*h[1][l1][m1][j]*h[9][l2][m2][j] - m1d*r_2*Omega*h[4][l1][m1][j]*h[9][l2][m2][j] + I*m1d*r_2*Omega*h[8][l1][m1][j]*h[9][l2][m2][j] + 3.*h[9][l1][m1][j]*h[9][l2][m2][j])))/(r_3*f[j]) + (0.35355339059327373*c2*(f_2*r[j]*(r[j]*(r[j]*ddh[4][l1][m1][j] + I*r[j]*ddh[8][l1][m1][j] + dh[4][l1][m1][j] + I*dh[8][l1][m1][j]) - h[4][l1][m1][j] - I*h[8][l1][m1][j])*(h[4][l2][m2][j] - I*h[8][l2][m2][j]) + r[j]*(h[4][l2][m2][j] - I*h[8][l2][m2][j])*(-1.0*I*m1d*sqrtl1*Omega*r[j]*h[1][l1][m1][j] - 2.0*I*m1d*Omega*h[5][l1][m1][j] + 2.*m1d*Omega*h[9][l1][m1][j]) - f_2*sqrtl1*r[j]*(r[j]*dh[3][l1][m1][j] - h[3][l1][m1][j])*(h[5][l2][m2][j] - I*h[9][l2][m2][j]) - r_2*(I*m1d*sqrtl1*Omega*h[2][l1][m1][j] + r[j]*(-(m1d*m1d*Omega_2*h[5][l1][m1][j]) - I*m1d*m1d*Omega_2*h[9][l1][m1][j]))*(h[5][l2][m2][j] - I*h[9][l2][m2][j]) - f[j]*(r_2*sqrtl1*dh[2][l1][m1][j]*h[4][l2][m2][j] - I*m1d*r_3*Omega*dh[5][l1][m1][j]*h[4][l2][m2][j] + m1d*r_3*Omega*dh[9][l1][m1][j]*h[4][l2][m2][j] - sqrtl1*r[j]*h[2][l1][m1][j]*h[4][l2][m2][j] - I*m1d*r_2*sqrtl1*Omega*h[3][l1][m1][j]*h[4][l2][m2][j] - 2.0*I*m1d*r_2*Omega*h[4][l2][m2][j]*h[5][l1][m1][j] - 3.0*I*h[4][l2][m2][j]*h[8][l1][m1][j] - 3.*h[4][l1][m1][j]*(h[4][l2][m2][j] - I*h[8][l2][m2][j]) - I*r_2*sqrtl1*dh[2][l1][m1][j]*h[8][l2][m2][j] - m1d*r_3*Omega*dh[5][l1][m1][j]*h[8][l2][m2][j] - I*m1d*r_3*Omega*dh[9][l1][m1][j]*h[8][l2][m2][j] + I*sqrtl1*r[j]*h[2][l1][m1][j]*h[8][l2][m2][j] - m1d*r_2*sqrtl1*Omega*h[3][l1][m1][j]*h[8][l2][m2][j] - 2.*m1d*r_2*Omega*h[5][l1][m1][j]*h[8][l2][m2][j] - 3.*h[8][l1][m1][j]*h[8][l2][m2][j] + 2.*m1d*r_2*Omega*h[4][l2][m2][j]*h[9][l1][m1][j] - I*h[5][l2][m2][j]*h[9][l1][m1][j] - 2.0*I*m1d*r_2*Omega*h[8][l2][m2][j]*h[9][l1][m1][j] - h[5][l1][m1][j]*(h[5][l2][m2][j] - I*h[9][l2][m2][j]) - h[9][l1][m1][j]*h[9][l2][m2][j]) + f[j]*(-(r_2*sqrtl1*dh[1][l1][m1][j]*h[5][l2][m2][j]) - I*m1d*r_3*Omega*dh[4][l1][m1][j]*h[5][l2][m2][j] + m1d*r_3*Omega*dh[8][l1][m1][j]*h[5][l2][m2][j] + sqrtl1*r[j]*h[1][l1][m1][j]*h[5][l2][m2][j] + I*m1d*r_2*Omega*h[4][l1][m1][j]*h[5][l2][m2][j] + I*h[4][l2][m2][j]*h[8][l1][m1][j] - m1d*r_2*Omega*h[5][l2][m2][j]*h[8][l1][m1][j] + h[4][l1][m1][j]*(h[4][l2][m2][j] - I*h[8][l2][m2][j]) + h[8][l1][m1][j]*h[8][l2][m2][j] + 3.0*I*h[5][l2][m2][j]*h[9][l1][m1][j] + 3.*h[5][l1][m1][j]*(h[5][l2][m2][j] - I*h[9][l2][m2][j]) + I*r_2*sqrtl1*dh[1][l1][m1][j]*h[9][l2][m2][j] - m1d*r_3*Omega*dh[4][l1][m1][j]*h[9][l2][m2][j] - I*m1d*r_3*Omega*dh[8][l1][m1][j]*h[9][l2][m2][j] - I*sqrtl1*r[j]*h[1][l1][m1][j]*h[9][l2][m2][j] + m1d*r_2*Omega*h[4][l1][m1][j]*h[9][l2][m2][j] + I*m1d*r_2*Omega*h[8][l1][m1][j]*h[9][l2][m2][j] + 3.*h[9][l1][m1][j]*h[9][l2][m2][j])))/(r_3*f[j]) + (0.35355339059327373*sqrtl5*c5*(sqrtl3*(2. - f[j]*r[j])*h[5][l1][m1][j] + I*sqrtl3*(2. - f[j]*r[j])*h[9][l1][m1][j] + r[j]*(l1d*(1 + l1d)*sqrtl4*h[1][l1][m1][j] + r[j]*(f_2*sqrtl1*r[j]*ddh[7][l1][m1][j] + I*f_2*sqrtl1*r[j]*ddh[10][l1][m1][j] - sqrtl3*f[j]*dh[5][l1][m1][j] + 2.*f_2*sqrtl1*dh[7][l1][m1][j] - I*sqrtl3*f[j]*dh[9][l1][m1][j] + 2.0*I*f_2*sqrtl1*dh[10][l1][m1][j] + I*m1d*sqrtl3*Omega*h[4][l1][m1][j] - m1d*m1d*sqrtl1*Omega_2*r[j]*h[7][l1][m1][j] - m1d*sqrtl3*Omega*h[8][l1][m1][j] - I*m1d*m1d*sqrtl1*Omega_2*r[j]*h[10][l1][m1][j])))*(h[7][l2][m2][j] - I*h[10][l2][m2][j]))/r_3 + (0.35355339059327373*sqrtl5*c4*(sqrtl3*(2. - f[j]*r[j])*h[5][l1][m1][j] - I*sqrtl3*(2. - f[j]*r[j])*h[9][l1][m1][j] + r[j]*(l1d*(1 + l1d)*sqrtl4*h[1][l1][m1][j] + r[j]*(f_2*sqrtl1*r[j]*ddh[7][l1][m1][j] - I*f_2*sqrtl1*r[j]*ddh[10][l1][m1][j] - sqrtl3*f[j]*dh[5][l1][m1][j] + 2.*f_2*sqrtl1*dh[7][l1][m1][j] + I*sqrtl3*f[j]*dh[9][l1][m1][j] - 2.0*I*f_2*sqrtl1*dh[10][l1][m1][j] + I*m1d*sqrtl3*Omega*h[4][l1][m1][j] - m1d*m1d*sqrtl1*Omega_2*r[j]*h[7][l1][m1][j] + m1d*sqrtl3*Omega*h[8][l1][m1][j] + I*m1d*m1d*sqrtl1*Omega_2*r[j]*h[10][l1][m1][j])))*(h[7][l2][m2][j] + I*h[10][l2][m2][j]))/r_3;
  }

  return ricci;
}
